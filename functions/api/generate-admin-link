// functions/api/generate-admin-link.js (修正版)

import * as jose from 'jose';

export async function onRequest(context) {
    // 【偵錯點 1】在函式入口記錄，確認 API 被呼叫
    console.log("generate-admin-link API started.");

    try {
        if (context.request.method !== 'POST') {
            return new Response(JSON.stringify({ error: '無效的請求方法' }), { status: 405 });
        }

        const { userId } = await context.request.json();
        if (!userId) {
            return new Response(JSON.stringify({ error: '缺少使用者 ID' }), { status: 400 });
        }

        // 【偵錯點 2】記錄收到的 User ID
        console.log(`Received request for userId: ${userId}`);

        const { env, request } = context;
        const db = env.DB;

        // --- 【黑名單檢查】 ---
        const user = await db.prepare("SELECT tag FROM Users WHERE user_id = ?").bind(userId).first();
        if (user && user.tag === '黑名單') {
            console.log(`User ${userId} is in blacklist. Denying access.`);
            return new Response(JSON.stringify({ error: '您的帳號權限不足，無法體驗此功能。' }), { status: 403 });
        }
        // --- 檢查結束 ---

        // 【偵錯點 3】確認黑名單檢查通過
        console.log("Blacklist check passed. Proceeding to generate JWT.");

        const { CF_ACCESS_CLIENT_ID, CF_ACCESS_CLIENT_SECRET } = env;
        if (!CF_ACCESS_CLIENT_ID || !CF_ACCESS_CLIENT_SECRET) {
            // 這個錯誤會被 catch 捕捉，如果發生，您會看到 JSON 錯誤，而不是 crash
            throw new Error('缺少 Cloudflare Access 的環境變數設定。');
        }

        // ** 【關鍵修正】將加密金鑰的準備工作移至最前面 **
        // 確保在執行 JWT 簽署前，secret 是穩定可用的
        const secret = new TextEncoder().encode(CF_ACCESS_CLIENT_SECRET);
        const now = Math.floor(Date.now() / 1000);
        
        const jwt = await new jose.SignJWT({
            email: `${userId}@demo.internal`, 
            iat: now,
            exp: now + 3600, 
        })
        .setProtectedHeader({ 
            alg: 'HS256',
            kid: CF_ACCESS_CLIENT_ID
        })
        .sign(secret);
        
        // 【偵錯點 4】確認 JWT 產生成功
        console.log("JWT generated successfully.");

        const url = new URL(request.url);
        const magicLink = `https://${url.hostname}/admin-panel.html?cf_authorization=${jwt}`;

        return new Response(JSON.stringify({ magicLink }), {
            status: 200,
            headers: { 'Content-Type': 'application/json' },
        });

    } catch (error) {
        // 如果程式執行到這裡，代表錯誤有被正常捕捉
        console.error('--- Caught Error in generate-admin-link API ---');
        console.error('Error Message:', error.message);
        console.error('Error Cause:', error.cause);
        console.error('-------------------------------------------');
        
        return new Response(JSON.stringify({ error: '產生體驗連結時發生錯誤。', details: error.message }), { status: 500 });
    }
}